{"version":3,"sources":["State.js","Utils.js","Actions.js","App.js","reportWebVitals.js","index.js"],"names":["State","pointers","selected","downCamera","THREE","midpoint","cube","zoomData","mouse","clip","ray","getWorldPixelAtZ","z","Math","tan","camera","fov","PI","getHeightFromZ","window","innerHeight","initScene","animate","a","requestAnimationFrame","renderer","render","scene","canvas","innerWidth","setSize","loader","promiseLoader","url","Promise","resolve","reject","load","data","texture","geometry","material","map","add","position","setRayFromMouse","pointerData","projectZ","set","x","y","unproject","sub","normalize","distance","copy","multiplyScalar","setPointerDownData","downMouse","downClip","downRay","down","makeMidpoint","first","second","distanceTo","midpointMouse","subVectors","midpointData","midpointDiv","document","createElement","className","el","style","transform","body","appendChild","removeMidpoint","remove","updateAllDown","i","length","pointer","updateAllOrder","order","setDownCamera","clone","App","canvasRef","useRef","useEffect","current","pointerDown","e","activePointer","newPointer","id","pointerId","clientX","clientY","pointerDiv","makePointerData","push","setPointerCapture","pointerMove","updatePointer","index","indexOf","getPointerById","updateMidpoint","ratio","newZ","max","min","worldPixel","diffx","diffy","pointerUp","splice","removePointer","releasePointerCapture","mouseWheel","visibleHeight","console","log","deltaMode","deltaY","addEventListener","passive","removeEventListener","width","height","aspect","updateProjectionMatrix","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c8d8188c.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nconst State = {\n  pointers: [],\n  selected: [],\n  downCamera: new THREE.Vector3(),\n  midpoint: null,\n  cube: null,\n  zoomData: {\n    mouse: new THREE.Vector2(),\n    clip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n  },\n};\n\nexport default State;\n","import State from \"./State\";\n\nexport const getHeightFromZ = (z) => {\n  return 2 * Math.tan((State.camera.fov * Math.PI) / 360) * z;\n};\n\nexport const getWorldPixelAtZ = (z) => {\n  const visibleHeight = getHeightFromZ(z);\n  return visibleHeight / window.innerHeight;\n};\n\nexport const getZForHeight = (worldHeight) => {\n  return worldHeight / (2 * Math.tan((State.camera.fov * Math.PI) / 360));\n};\n","import State from \"./State\";\nimport * as THREE from \"three\";\n\nexport const initScene = async () => {\n  const canvas = State.canvas;\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    100\n  );\n\n  State.scene = scene;\n  State.camera = camera;\n\n  const renderer = new THREE.WebGLRenderer({ canvas: canvas });\n  State.renderer = renderer;\n  renderer.setSize(window.innerWidth, window.innerHeight);\n\n  const loader = new THREE.TextureLoader();\n  const promiseLoader = (url) => {\n    return new Promise((resolve, reject) => {\n      loader.load(url, (data) => resolve(data), null, reject);\n    });\n  };\n\n  const src = \"grant_gracus-1573758087479.png\";\n  const texture = await promiseLoader(src);\n\n  const geometry = new THREE.PlaneGeometry(2, 2);\n  const material = new THREE.MeshBasicMaterial({\n    map: texture,\n  });\n  const cube = new THREE.Mesh(geometry, material);\n\n  State.cube = cube;\n  scene.add(cube);\n\n  camera.position.z = 5;\n\n  function animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n  }\n  animate();\n};\n\nexport const setRayFromMouse = (pointerData, projectZ, camera) => {\n  const { clip, ray } = pointerData;\n  clip.set(\n    (pointerData.mouse.x / window.innerWidth) * 2 - 1,\n    -(pointerData.mouse.y / window.innerHeight) * 2 + 1,\n    0.5\n  );\n  clip.unproject(camera);\n  clip.sub(camera.position).normalize();\n  const distance = (projectZ - camera.position.z) / clip.z;\n  ray.copy(camera.position).add(clip.multiplyScalar(distance));\n};\n\nexport const getOpenSlot = () => {\n  // Find order for new pointer\n  // This method preserves continuous touches\n  const orders = State.pointers.map((pointer) => pointer.order);\n  const maxCurrent = Math.max(...orders, -1);\n  return maxCurrent + 1;\n};\n\nexport const setPointerDownData = (pointerData) => {\n  // Save down\n  const downMouse = new THREE.Vector2();\n  const downClip = new THREE.Vector3();\n  const downRay = new THREE.Vector3();\n  downMouse.copy(pointerData.mouse);\n  downClip.copy(pointerData.clip);\n  downRay.copy(pointerData.ray);\n  pointerData.down = {\n    mouse: downMouse,\n    clip: downClip,\n    ray: downRay,\n  };\n};\n\nexport const makePointerData = (e) => {\n  // Copy only the event properties we need\n  const newPointer = {\n    order: State.pointers.length,\n    id: e.pointerId,\n    mouse: new THREE.Vector2(e.clientX, e.clientY),\n    clip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n  };\n  setRayFromMouse(newPointer, 0, State.camera);\n\n  setPointerDownData(newPointer);\n\n  const pointerDiv = document.createElement(\"div\");\n  pointerDiv.className = \"pointer p\" + State.pointers.length;\n  document.body.appendChild(pointerDiv);\n  newPointer.el = pointerDiv;\n  newPointer.el.style.transform = `translate(${newPointer.mouse.x}px, ${newPointer.mouse.y}px)`;\n\n  return newPointer;\n};\n\nexport const makeMidpoint = () => {\n  const first = State.pointers[0];\n  const second = State.pointers[1];\n\n  const distance = first.mouse.distanceTo(second.mouse);\n\n  const midpointMouse = new THREE.Vector2();\n  midpointMouse.subVectors(second.mouse, first.mouse);\n  midpointMouse.normalize();\n  midpointMouse.multiplyScalar(distance / 2);\n  midpointMouse.add(first.mouse);\n\n  const midpointData = {\n    mouse: midpointMouse,\n    clip: new THREE.Vector3(),\n    ray: new THREE.Vector3(),\n    distance,\n  };\n  setRayFromMouse(midpointData, 0, State.camera);\n  setPointerDownData(midpointData);\n  midpointData.down.distance = distance;\n\n  const midpointDiv = document.createElement(\"div\");\n  midpointDiv.className = \"pointer m0\";\n  midpointData.el = midpointDiv;\n  midpointData.el.style.transform = `translate(${midpointData.mouse.x}px, ${midpointData.mouse.y}px)`;\n  document.body.appendChild(midpointDiv);\n\n  State.midpoint = midpointData;\n};\n\nexport const removeMidpoint = () => {\n  if (State.midpoint !== null) {\n    State.midpoint.el.remove();\n    State.midpoint = null;\n  }\n};\n\nexport const updateAllDown = (pointers) => {\n  for (let i = 0; i < pointers.length; i++) {\n    const pointer = pointers[i];\n    setPointerDownData(pointer);\n  }\n};\n\nexport const getPointerById = (id) => {\n  const pointerIds = State.pointers.map((pointer) => pointer.id);\n  const index = pointerIds.indexOf(id);\n  return State.pointers[index];\n};\n\nexport const removePointer = (e) => {\n  const pointerIds = State.pointers.map((pointer) => pointer.id);\n  const index = pointerIds.indexOf(e.pointerId);\n  if (index !== -1) {\n    State.pointers[index].el.remove();\n    State.pointers.splice(index, 1);\n  }\n};\n\nexport const updatePointer = (activePointer, e) => {\n  activePointer.mouse.x = e.clientX;\n  activePointer.mouse.y = e.clientY;\n  setRayFromMouse(activePointer, State.camera.position.z, State.camera);\n  activePointer.el.style.transform = `translate(${activePointer.mouse.x}px, ${activePointer.mouse.y}px)`;\n};\n\nexport const updateMidpoint = () => {\n  // TODO factor this a different way\n  const midpoint = State.midpoint;\n\n  const first = State.pointers[0];\n  const second = State.pointers[1];\n\n  const distance = first.mouse.distanceTo(second.mouse);\n\n  const midpointMouse = new THREE.Vector2();\n  midpointMouse.subVectors(second.mouse, first.mouse);\n  midpointMouse.normalize();\n  midpointMouse.multiplyScalar(distance / 2);\n  midpointMouse.add(first.mouse);\n\n  midpoint.mouse.x = midpointMouse.x;\n  midpoint.mouse.y = midpointMouse.y;\n  midpoint.distance = distance;\n  setRayFromMouse(midpoint, 0, State.camera);\n\n  midpoint.el.style.transform = `translate(${midpoint.mouse.x}px, ${midpoint.mouse.y}px)`;\n};\n\nexport const updateAllOrder = (pointers) => {\n  for (let i = 0; i < pointers.length; i++) {\n    const pointer = pointers[i];\n    pointer.order = i;\n    pointer.el.className = \"pointer p\" + i;\n  }\n};\n\nexport const setDownCamera = () => {\n  State.downCamera = State.camera.clone();\n};\n","import React, { useEffect, useRef } from \"react\";\nimport State from \"./State\";\nimport * as THREE from \"three\";\nimport { getHeightFromZ, getWorldPixelAtZ } from \"./Utils\";\nimport {\n  getPointerById,\n  initScene,\n  makePointerData,\n  removePointer,\n  updatePointer,\n  updateAllOrder,\n  updateAllDown,\n  makeMidpoint,\n  removeMidpoint,\n  updateMidpoint,\n  setDownCamera,\n  setRayFromMouse,\n} from \"./Actions\";\n\nfunction App() {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    const pointerDown = (e) => {\n      const activePointer = makePointerData(e);\n      State.pointers.push(activePointer);\n\n      setDownCamera();\n\n      updateAllOrder(State.pointers);\n      updateAllDown(State.pointers);\n\n      if (State.pointers.length > 1) {\n        removeMidpoint();\n        makeMidpoint();\n      }\n\n      canvas.setPointerCapture(e.pointerId);\n    };\n\n    const pointerMove = (e) => {\n      if (State.pointers.length > 0) {\n        const activePointer = getPointerById(e.pointerId);\n        updatePointer(activePointer, e);\n\n        if (State.midpoint !== null) {\n          const midpoint = State.midpoint;\n          updateMidpoint();\n\n          // Directed zoom\n          const zoomData = State.zoomData;\n          const ratio = midpoint.distance / midpoint.down.distance;\n          const newZ = Math.max(\n            0.1,\n            Math.min(30, State.downCamera.position.z / ratio)\n          );\n          zoomData.mouse.copy(midpoint.mouse);\n          setRayFromMouse(zoomData, newZ, State.downCamera);\n\n          // Apply pan on top of ray\n          const worldPixel = getWorldPixelAtZ(State.downCamera.position.z);\n          const diffx = midpoint.mouse.x - midpoint.down.mouse.x;\n          const diffy = midpoint.mouse.y - midpoint.down.mouse.y;\n          State.camera.position.x = zoomData.ray.x - diffx * worldPixel;\n          State.camera.position.y = zoomData.ray.y + diffy * worldPixel;\n          State.camera.position.z = zoomData.ray.z;\n        }\n      }\n    };\n\n    const pointerUp = (e) => {\n      removePointer(e);\n\n      setDownCamera();\n\n      updateAllOrder(State.pointers);\n      updateAllDown(State.pointers);\n\n      removeMidpoint();\n      if (State.pointers.length > 1) {\n        makeMidpoint();\n      }\n\n      canvas.releasePointerCapture(e.pointerId);\n    };\n\n    const mouseWheel = (e) => {\n      // if (e.ctrlKey) {\n      const zoomData = State.zoomData;\n      const visibleHeight = window.innerHeight;\n      console.log(e.deltaMode);\n      const adjusted = visibleHeight - e.deltaY;\n      const ratio = adjusted / visibleHeight;\n      const newZ = Math.max(0.1, Math.min(30, State.camera.position.z / ratio));\n      const mouse = new THREE.Vector2(e.clientX, e.clientY);\n      zoomData.mouse.copy(mouse);\n      setRayFromMouse(zoomData, newZ, State.camera);\n      State.camera.position.copy(zoomData.ray);\n      // } else {\n      //   const worldPixel = getWorldPixelAtZ(State.camera.position.z);\n      //   State.camera.position.x -= e.deltaX * worldPixel;\n      //   State.camera.position.y += e.deltaY * worldPixel;\n      // }\n    };\n\n    canvas.addEventListener(\"pointerdown\", pointerDown);\n    canvas.addEventListener(\"pointermove\", pointerMove);\n    canvas.addEventListener(\"pointerup\", pointerUp);\n    canvas.addEventListener(\"pointercancel\", pointerUp);\n    canvas.addEventListener(\"mousewheel\", mouseWheel, { passive: false });\n    return () => {\n      canvas.removeEventListener(\"pointerdown\", pointerDown);\n      canvas.removeEventListener(\"pointermove\", pointerMove);\n      canvas.removeEventListener(\"pointerup\", pointerUp);\n      canvas.removeEventListener(\"pointercancel\", pointerUp);\n      canvas.removeEventListener(\"mousewheel\", mouseWheel);\n    };\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    State.canvas = canvas;\n    initScene();\n  }, [canvasRef]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      State.camera.aspect = window.innerWidth / window.innerHeight;\n      State.camera.updateProjectionMatrix();\n      State.renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <div>\n      <canvas ref={canvasRef}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}